-- YOU NEED A MACRO TO PRESS G
-- set bed to darkgreen retreat
-- you must set the wait time to 12, or anticheat will kick u
-- chests with enemys nearby are blacklisted
-- YOU MUST JOIN A SERVER WITH LOTS OF PLAYERS. the more players in a server, the faster the chests respawn.



-- SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

-- SETTINGS
local delay = 12 -- Seconds between chest teleports

-- CHEST FOLDERS TO FARM (with blacklists)
local chestFolders = {
    {
        folderName = "GoldChests",
        blacklist = { "Glider", "Viking" }
    },
    {
        folderName = "Chests",
        blacklist = { "Pigface", "MountainTop", "Swamp", "Underground" }
    }
}

-- FUNCTION TO WAIT FOR CHARACTER
local function getHumanoidRootPart()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- BLACKLIST CHECK
local function isBlacklisted(name, blacklist)
    for _, blockedName in ipairs(blacklist) do
        if name == blockedName then
            return true
        end
    end
    return false
end

-- GET SORTED CHESTS FROM A FOLDER
local function getSortedChests(folderName, blacklist, rootPosition)
    local result = {}
    local folder = workspace:FindFirstChild(folderName)
    if folder and folder:IsA("Folder") then
        for _, model in ipairs(folder:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChild("Root") and model.Root:IsA("BasePart") then
                if not isBlacklisted(model.Name, blacklist) then
                    table.insert(result, model)
                end
            end
        end

        -- Sort chests by distance
        table.sort(result, function(a, b)
            local distA = (a.Root.Position - rootPosition).Magnitude
            local distB = (b.Root.Position - rootPosition).Magnitude
            return distA < distB
        end)
    end
    return result
end

-- MAIN LOOP
task.spawn(function()
    while true do
        local HumanoidRootPart = getHumanoidRootPart()
        local originalCFrame = HumanoidRootPart.CFrame

        local chestFound = false

        for _, chestEntry in ipairs(chestFolders) do
            local folderName = chestEntry.folderName
            local blacklist = chestEntry.blacklist or {}

            local sortedChests = getSortedChests(folderName, blacklist, HumanoidRootPart.Position)

            if #sortedChests > 0 then
                chestFound = true
                for _, model in ipairs(sortedChests) do
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        HumanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                        HumanoidRootPart.CFrame = model.Root.CFrame + Vector3.new(0, 5, 0)
                        print("[ChestTeleporter] Teleported to " .. folderName .. ": " .. model.Name)
                        task.wait(delay)
                    else
                        break
                    end
                end
            end
        end

        -- Return to original position if still alive
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            HumanoidRootPart = LocalPlayer.Character.HumanoidRootPart
            HumanoidRootPart.CFrame = originalCFrame
            print("[ChestTeleporter] Returned to original position.")
        end

        if not chestFound then
            print("[ChestTeleporter] No chests found. Waiting for respawn...")
            repeat
                task.wait(1)
                HumanoidRootPart = getHumanoidRootPart()
                chestFound = false
                for _, entry in ipairs(chestFolders) do
                    if #getSortedChests(entry.folderName, entry.blacklist, HumanoidRootPart.Position) > 0 then
                        chestFound = true
                        break
                    end
                end
            until chestFound
        end
    end
end)
